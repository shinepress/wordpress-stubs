<?php

namespace SimplePie;

/**
 * Miscellaneous utilities
 *
 * @package SimplePie
 */
class Misc
{
    public static function time_hms($seconds)
    {
    }
    public static function absolutize_url($relative, $base)
    {
    }
    /**
     * Get a HTML/XML element from a HTML string
     *
     * @deprecated since SimplePie 1.3, use DOMDocument instead (parsing HTML with regex is bad!)
     * @param string $realname Element name (including namespace prefix if applicable)
     * @param string $string HTML document
     * @return array
     */
    public static function get_element($realname, $string)
    {
    }
    public static function element_implode($element)
    {
    }
    public static function error($message, $level, $file, $line)
    {
    }
    public static function fix_protocol($url, $http = 1)
    {
    }
    /**
     * @deprecated since SimplePie 1.8.0, use PHP native array_replace_recursive() instead.
     */
    public static function array_merge_recursive($array1, $array2)
    {
    }
    public static function parse_url($url)
    {
    }
    public static function compress_parse_url($scheme = '', $authority = '', $path = '', $query = '', $fragment = '')
    {
    }
    public static function normalize_url($url)
    {
    }
    public static function percent_encoding_normalization($match)
    {
    }
    /**
     * Converts a Windows-1252 encoded string to a UTF-8 encoded string
     *
     * @static
     * @param string $string Windows-1252 encoded string
     * @return string UTF-8 encoded string
     */
    public static function windows_1252_to_utf8($string)
    {
    }
    /**
     * Change a string from one encoding to another
     *
     * @param string $data Raw data in $input encoding
     * @param string $input Encoding of $data
     * @param string $output Encoding you want
     * @return string|boolean False if we can't convert it
     */
    public static function change_encoding($data, $input, $output)
    {
    }
    protected static function change_encoding_mbstring($data, $input, $output)
    {
    }
    protected static function change_encoding_iconv($data, $input, $output)
    {
    }
    /**
     * @param string $data
     * @param string $input
     * @param string $output
     * @return string|false
     */
    protected static function change_encoding_uconverter($data, $input, $output)
    {
    }
    /**
     * Normalize an encoding name
     *
     * This is automatically generated by create.php
     *
     * To generate it, run `php create.php` on the command line, and copy the
     * output to replace this function.
     *
     * @param string $charset Character set to standardise
     * @return string Standardised name
     */
    public static function encoding($charset)
    {
    }
    public static function get_curl_version()
    {
    }
    /**
     * Strip HTML comments
     *
     * @param string $data Data to strip comments from
     * @return string Comment stripped string
     */
    public static function strip_comments($data)
    {
    }
    public static function parse_date($dt)
    {
    }
    /**
     * Decode HTML entities
     *
     * @deprecated since SimplePie 1.3, use DOMDocument instead
     * @param string $data Input data
     * @return string Output data
     */
    public static function entities_decode($data)
    {
    }
    /**
     * Remove RFC822 comments
     *
     * @param string $data Data to strip comments from
     * @return string Comment stripped string
     */
    public static function uncomment_rfc822($string)
    {
    }
    public static function parse_mime($mime)
    {
    }
    public static function atom_03_construct_type($attribs)
    {
    }
    public static function atom_10_construct_type($attribs)
    {
    }
    public static function atom_10_content_construct_type($attribs)
    {
    }
    public static function is_isegment_nz_nc($string)
    {
    }
    public static function space_separated_tokens($string)
    {
    }
    /**
     * Converts a unicode codepoint to a UTF-8 character
     *
     * @static
     * @param int $codepoint Unicode codepoint
     * @return string UTF-8 character
     */
    public static function codepoint_to_utf8($codepoint)
    {
    }
    /**
     * Similar to parse_str()
     *
     * Returns an associative array of name/value pairs, where the value is an
     * array of values that have used the same name
     *
     * @static
     * @param string $str The input string.
     * @return array
     */
    public static function parse_str($str)
    {
    }
    /**
     * Detect XML encoding, as per XML 1.0 Appendix F.1
     *
     * @todo Add support for EBCDIC
     * @param string $data XML data
     * @param \SimplePie\Registry $registry Class registry
     * @return array Possible encodings
     */
    public static function xml_encoding($data, $registry)
    {
    }
    public static function output_javascript()
    {
    }
    /**
     * Get the SimplePie build timestamp
     *
     * Uses the git index if it exists, otherwise uses the modification time
     * of the newest file.
     */
    public static function get_build()
    {
    }
    /**
     * Get the default user agent string
     *
     * @return string
     */
    public static function get_default_useragent()
    {
    }
    /**
     * Format debugging information
     */
    public static function debug(&$sp)
    {
    }
    public static function silence_errors($num, $str)
    {
    }
    /**
     * Sanitize a URL by removing HTTP credentials.
     * @param string $url the URL to sanitize.
     * @return string the same URL without HTTP credentials.
     */
    public static function url_remove_credentials($url)
    {
    }
}